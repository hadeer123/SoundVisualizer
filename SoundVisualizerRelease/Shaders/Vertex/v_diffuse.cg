/****************************************************************
 *	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#
 *
 *	     Shader: Diffuse Vertex Program
 *	Description: This vertex program calculate in general
 *	             all transformations for the diffuse-term.
 *	      Group: Gunnar Busch, Hadeer Khaled and Philipp Petzold
 *
 *	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#
 ****************************************************************/

// The passing struct
struct vert2frag {
	float4 position			: POSITION;		// position in ws
	float4 color			: COLOR0;		// light color
	float2 texCoord			: TEXCOORD0;	// texture coordinates
	float3 normal			: TEXCOORD1;	// normal in ws
	float3 lightW			: TEXCOORD2;	// light position in ws
	float3 viewW			: TEXCOORD3;	// view position in ws
};

// main function
vert2frag vfunc_diffuse( float4 position    : POSITION,		// position in os
						 float3 normal	    : NORMAL,		// normal
						 float2 texCoord	: TEXCOORD0,	// texture coordinates

						 uniform float3 lightPos,		// light position
						 uniform float3 viewPos,		// view position
						 uniform float4 constantColor,	// light color
						
						 uniform float4x4 mvp,			// model-view-projection matrix
						 uniform float4x4 m2w,			// model-view matrix
						 uniform float4x4 m2wIT )		// inverse-transpose model-view matrix
{
	vert2frag OUT;

	// Pass texture coordinates
	OUT.texCoord = texCoord;

	// Compute position in world space and pass
	OUT.position = mul(mvp, position);

	// Compute normal in world space and pass
	OUT.normal   = mul(m2wIT, float4(normal, 1.0));

	// Compute position in world space
	float3 positionW = mul(m2w, position);

	// Compute light vector in world space and pass
	OUT.lightW = lightPos - positionW;

	// Compute view vector in world space and pass
	OUT.viewW = viewPos - position;

	// Pass light color
	OUT.color = constantColor;

	return OUT;	
}
